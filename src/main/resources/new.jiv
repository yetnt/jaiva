
@ Jaiva!
@ make sure to always shout your code

@ variable declaration

maak a <- 10!    @ Variable declaration
a <- 50!         @ Re-assign variable
maak b!          @ variable declaration with no value
b <- true!

maak b <- "A string! Here at Jaiva! We hate using $"single quotes$""
@ Use dollar sign to escape characters

{
    Boolean keywords
    true = true
    yebo = true
    false = false
    aowa = false
}

maak arrqay <-| 10, 123, 123! 
@ The parser actually doesnt parse arrays properly
@ So currently, these all get parsed as strings. Lol.



@ Log to the console. (And function usage)
khuluma("What the fuck is this language.")!

@ A Function!
kwenza addition(param1, param2) ->
    @ yes. blocks are made with  -> <~ (I have font ligatures)
    @ "khutla" is the return keyword.
    khutla param1 + param2!
<~

khuluma(addition(10, 10))!

@ Since we use <- for assignments, double equals doesnt exist.
if (arrqay[2] = 10) ->
    khuluma("Third Array Element is 10")!
<~ mara if (arrqay[2] = 2) ->
    khuluma("It's not 10. It's 2!")!
<~ mara ->
    khuluma("Whatever")!
<~



@ For loops
colonize i <- 0 | i < 10 | + ->
    khuluma("My favourite keyword.")!
<~

@ While loop
nikhil (yebo) ->
    @ Shoutout to all my nikhils out there.
    khuluma("infinite while loop!")!
<~

@ Try-catch
zama zama ->
    cima <== "This keyword will throw an error"!
<~ chaai ->
    khuluma("There was an error bro give up coding")!
<~


@ Stuff i want to implement but wont rn

@ Linked Lists
maak list <- 10 <- 100 <- 823 <- 12!

khuluma(list)! @ Linked List reference
khuluma(list*)! @ Value at pos 1 
khuluma($list)! @ Linked List reference at pos 2
khuluma($list*)! @ Value at pos 2 

@ Objects
maak obj |->
    key <- "value"!
    anotherkey <- 10!
<~

@ 2 For Loops running in parallel
colonize i, j <- 0 | i >= 10, j <= -10 | +- ->
    left ->
    @ some code that uses the variable i
    @ i will be incremented
    <~
    right ->
    @ some code that uses the variable j
    @ j will be decremented
    <~
<~